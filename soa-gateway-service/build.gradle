plugins {
    id 'org.springframework.boot' version '3.1.3'
    id 'uk.co.boothen.gradle.wsimport' version '0.21'
    id 'jacoco'
    id 'checkstyle'
}

ext {
    checkstyleVersion = '10.12.2'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    integrationTestImplementation.extendsFrom(testImplementation)
    integrationTestRuntimeOnly.extendsFrom(testRuntimeOnly)
}

dependencies {
    implementation project(':soa-gateway-api')

    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-validation:3.2.4'

    //Enable Swagger UI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    //Required for pagination
    implementation 'org.springframework.data:spring-data-commons:3.1.4'

    // For mock Contract Details only
    implementation 'org.wiremock:wiremock:3.3.1'

    implementation 'org.springframework.ws:spring-ws-security'
    implementation 'org.modelmapper:modelmapper:3.1.1'
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation "org.mapstruct:mapstruct:1.5.5.Final"
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor "org.mapstruct:mapstruct-processor:1.5.5.Final"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.ws:spring-ws-test'
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.0'
}

wsimport {
    extension = true
    verbose = false
    quiet = true
    debug = false
    xadditionalHeaders = true

    wsdl('Schema/BusinessServices/CCMS/CaseManagement/NotificationServices.wsdl') {
        xjcarg("-XautoNameResolution")
        wsdlLocation = 'classpath:wsdl/Schema/BusinessServices/CCMS/CaseManagement/NotificationServices.wsdl'
    }

    wsdl('/Schema/BusinessServices/CCMS/Common/GetContractDetails.wsdl') {
        xjcarg("-XautoNameResolution")
        wsdlLocation = 'classpath:wsdl/Schema/BusinessServices/CCMS/Common/GetContractDetails.wsdl'
    }

    wsdl('/Schema/BusinessServices/CCMS/ClientManagement/ClientServices.wsdl') {
        xjcarg("-XautoNameResolution")
        wsdlLocation = 'classpath:wsdl/Schema/BusinessServices/CCMS/ClientManagement/ClientServices.wsdl'
    }

    wsdl('/Schema/BusinessServices/CCMS/Common/GetReferencedata.wsdl') {
        xjcarg("-XautoNameResolution")
        wsdlLocation = 'classpath:wsdl/Schema/BusinessServices/CCMS/Common/GetReferencedata.wsdl'
    }

    wsdl('Schema/BusinessServices/CCMS/CaseManagement/CaseServices.wsdl') {
        xjcarg("-XautoNameResolution")
        wsdlLocation = 'classpath:wsdl/Schema/BusinessServices/CCMS/CaseManagement/CaseServices.wsdl'
    }
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    useJUnitPlatform()
    description = "Run integration tests"
    group = "verification"
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

jacocoTestReport {

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/SoaGatewayApplication.class',
                                        'org/oasis_open/docs/wss/**',
                                        'uk/gov/legalservices/**'
            ])
        }))
    }

    dependsOn tasks['test']
}

jacocoTestCoverageVerification {

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: ['**/SoaGatewayApplication.class',
                                        'org/oasis_open/docs/wss/**',
                                        'uk/gov/legalservices/**'
            ])
        }))
    }


    violationRules {
        rule {
            limit {
                minimum = 0.80  // You can define your required coverage ratio here.
            }
        }
    }

    dependsOn tasks['test']
}

checkstyleMain {
    //exclude auto generated files
    exclude '**/uk/gov/legalservices/**'
    exclude '**/org/oasis_open/**'
}

checkstyle {
    maxWarnings = 0
    toolVersion = "${checkstyleVersion}"
    sourceSets = [sourceSets.main]
    showViolations = true
}

